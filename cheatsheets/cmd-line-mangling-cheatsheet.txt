awk (pattern scanning)
  cat input.txt | awk '{print $4}' [split the content using whitespace (default delimiter), return the 4th element]

cut (select portions of a file)
  cut -d ',' -f 4 [uses ',' as the delimiter, extracts field 4]

cmd substitution/nesting
  diff <(head ./file1) <(head ./file2) [nested cmds]

diff
  diff file1 file2

First xx lines (default is 10)
  head -n xx tgt.txt

grep
  grep string /in/this/file
  -w ["whole word" matching only]
  grep -e any -e of -e these /in/this/file

head (print the first x lines (default 10))
  head raw.txt

output redirection
  cat input.txt > output.txt [overwrites]
  cat input.txt >> output.txt [appends]
  cat input.txt 2> errors.txt [redirect stderr and overwrite]
  cat input.txt &>> log.txt [redirect stdout and stderr, and append]
  wc -l < input.txt [takes input.txt as input, useful for reordering parsing flows]

sort
  cat raw.txt | sort
    -u [unique rows]
    -n numerical sort (iw, 2 > 11)
    -V natural sort (ie, 2 < 11)
    by default:
    By default, the GNU sort command applies lexicographic (alphabetical) order based on the current locale's collating rules. This means:
    It sorts lines character by character, following the order defined by the locale.
    If no sorting keys are specified, it considers the entire line as the sorting key.
    Numbers are treated as strings, so "11" comes before "2" (because "1" is smaller than "2" in ASCII order)

sed ("stream editor")
  cat input.txt | sed 's/,$//' [this removes trailing commas on every line. idfk...]

tee (splitting stdout)
  cmd | tee file1 | file2

tr (translate/delete chars)
  cat input.txt | tr 'a' 'A' [replaces a with A]
  cat input.txt | tr '\n' ',' [replaces newlines with commas]

wc (count lines in file)
  cat raw.txt | wc -l
  PS: Get-Content tgt.txt | Measure-Object -Line